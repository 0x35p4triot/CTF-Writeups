

# This file was *autogenerated* from the file solved.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13386 = Integer(13386); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
from sage.all import *
from Crypto.Util.number import *
from pwn import *
from json import *


f = connect('socket.cryptohack.org', _sage_const_13386 )
f.recvuntil(b"\n")
f.sendline(dumps({"option" : "get_flag"}))

a = loads(f.recvline().decode())

encrypted_flag = a["encrypted_flag"]
modulus = a["modulus"]
padding = a["padding"]

def gcd(a,b):
    while b:
        a, b = b, a % b
    return a.monic()

P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
p1 = (padding[_sage_const_0 ][_sage_const_0 ] * x + padding[_sage_const_0 ][_sage_const_1 ]) ** e - enc[_sage_const_0 ]
p2 = (padding[_sage_const_1 ][_sage_const_0 ] * x + padding[_sage_const_1 ][_sage_const_1 ]) ** e - enc[_sage_const_1 ]
m = -gcd(p1, p2).coefficients()[_sage_const_0 ]
flag = long_to_bytes(int(m)).decode()
print(flag)

