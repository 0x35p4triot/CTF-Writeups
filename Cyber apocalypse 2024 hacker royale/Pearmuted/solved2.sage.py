

# This file was *autogenerated* from the file solved2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_50000 = Integer(50000)
from data import g, A, B
print(b"luong")
m = []
for i in range(len(g)):
    t = [_sage_const_0 ]*len(g)
    t[g[i]] = _sage_const_1 
    m.append(t)

G = Matrix(m)
f = G.charpoly()

a = []
for i in range(len(g)):
    t = [_sage_const_0 ]*len(g)
    t[A[i]] = _sage_const_1 
    a.append(t)
A_pub = Matrix(a)

b = []
for i in range(len(g)):
    t = [_sage_const_0 ]*len(g)
    t[B[i]] = _sage_const_1 
    b.append(t)
B_pub = Matrix(b)
J, X = G.jordan_form(transformation=True)


X = []
M = []
for g,e in f.factor():
    assert e == _sage_const_1 
    K = GF(_sage_const_2 **g.degree(), x, modulus=g, impl='pari_ffelt')
    a = g.roots(K)[_sage_const_0 ][_sage_const_0 ]
    w = (G - a*_sage_const_1 ).right_kernel_matrix().rows()[_sage_const_0 ]
    V = [vector([_sage_const_0 ]*i + [_sage_const_1 ] + [_sage_const_0 ]*(N-_sage_const_1 -i)) for i in range(_sage_const_50000 )]
    P = Matrix(K, [w] + V[:-_sage_const_1 ]).transpose()
    assert P.row_space().dimension() == N
    J_ = ~P * A_pub * P
    X.append(int(J_[_sage_const_0 ][_sage_const_0 ].log(a)))
    M.append(K.multiplicative_generator().multiplicative_order())

A_priv = crt(X, M)
print(A_priv)

