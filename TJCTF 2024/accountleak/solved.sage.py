

# This file was *autogenerated* from the file solved.sage
from sage.all_cmdline import *   # import sage library

_sage_const_31601 = Integer(31601); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_65537 = Integer(65537)
from sage.all import *
from pwn import *

# f = process(["python3", "main.py"])
f = connect("tjc.tf", _sage_const_31601 , level = 'debug')

f.recvuntil(b"<Bobby> i'll give you the powerful numbers, ")
c = int(f.recvuntil(b' and ', drop=True).decode())
n = int(f.recvuntil(b'\n', drop=True).decode())
f.recvline()
f.recvline()
f.sendlineafter(b'<You>', b'yea')
f.recvuntil(b"<Bobby> i'll send coords\n")
dont_leak_this = int(f.recvline().replace(b'<Bobby> ',b'').strip().decode())
for sub in range(_sage_const_1 , _sage_const_2 **_sage_const_20 ):
    if (n + sub**_sage_const_2  - dont_leak_this) % sub != _sage_const_0 : continue
    s = (n + sub**_sage_const_2  - dont_leak_this) // sub
    P = PolynomialRing(ZZ, 'x')
    x = P.gen()
    fx = x**_sage_const_2  - s*x + n
    roots = fx.roots()
    if len(roots) == _sage_const_0 : continue
    p, q = roots[_sage_const_0 ][_sage_const_0 ], roots[_sage_const_1 ][_sage_const_0 ]
    assert p * q == n
    d = pow(_sage_const_65537 , -_sage_const_1 , (p-_sage_const_1 ) * (q-_sage_const_1 ))
    print(f"{d = }")
    my_password = pow(c, d, n)
    f.recvline()
    f.recvline()
    f.sendlineafter(b"<You>", str(my_password).encode())
    f.recvline()
    f.recvline()
    print(f.recvline())
f.close()

