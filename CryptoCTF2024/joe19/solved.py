from Crypto.Util.number import *
from sympy import nextprime

# def GPT6(seed):
#     prime = 2
#     for c in seed:
#         prime = nextprime(prime)
#         prime_str = str(prime)
#         idx = prime_str.find(c)
#         if idx == -1:
#             return GPT6(seed)  # Nếu không tìm thấy chữ số trong số nguyên tố, thử lại với số nguyên tố tiếp theo
#         prime = int(prime_str[idx:])  # Chỉ lấy phần chữ số từ vị trí idx trở đi
#     return prime

# # Sử dụng hàm GPT6 để tạo ra các số nguyên tố
# P = [GPT6('A 512-bit prime appears in consecutive digits of e') for _ in range(4)]
# print(P)
n = 8098851734937207931222242323719278262039311278408396153102939840336549151541408692581651429325092535316359074019383926520363453725271849258924996783681725111665666420297112252565291898169877088446887149672943461236879128453847442584868198963005276340812322871768679441501282681171263391133217373094824601748838255306528243603493400515452224778867670063040337191204276832576625227337670689681430055765023322478267339944312535862682499007423158988134472889946113994555274385595499503495488202251032898470224056637967019786473820952632846823442509236976892995505554046850101313269847925347047514591030406052185186963433
c = 7109666883988892105091816608945789114105575520302872143453259352879355990908149124303310269223886289484842913063773914475282456079383409262649058768777227206800315566373109284537693635270488429501591721126853086090237488579840160957328710017268493911400151764046320861154478494943928510792105098343926542515526432005970840321142196894715037239909959538873866099850417570975505565638622448664580282210383639403173773002795595142150433695880167315674091756597784809792396452578104130341085213443116999368555639128246707794076354522200892568943534878523445909591352323861659891882091917178199085781803940677425823784662
p = 9486496746615829212910959969615785830562917151204298551900465316093865252479488284996884724551063109098095380458528068620652285255690725177827662282965533

phi = (p-1)*(p-1)*(p-1)*(p-1)
d = inverse(65537, phi)
print(pow(c,d,n))
# # Tiếp tục với phần còn lại của giải mã, giống như đã làm trước đó

# d = 65537
# m = pow(c, d, n)
# flag = long_to_bytes(m)
# print(flag.decode())
