from Crypto.Util.number import *
from sage.all import *

n = 301929748923678449872944933611657670834216889867340028357609265175830693931365828840717548752313862343315133541384709574659039910206634528428504034051556622114290811586746168354731258756502196637977942743110508997919976400864419640496894428180120687863921269087080600917900477624095004141559042793509244689248253036809126205146653922738685595903222471152317095497914809983689734189245440774658145462867680027337
c = 104375152140523502741159687674899095271676058870899569351687154311685938980840028326701029233383897490722759532494438442871187152038720886122756131781086198384270569105043114469786514257765392820254951665751573388426239366215033932234329514161827069071792449190823827669673064646681779764841034307000600929149689291216313319444583032339045277433847691961234044840927155960887984372868669401051358701522484473320

def rebase(n, b):
    if n < b:
        return [n]
    else:
        return [n % b] + rebase(n//b, b)

x = var('x')
P = PolynomialRing(ZZ, x)
for m in range(3, 200):
     tmp = rebase(n, m)
     k1 = factor(P(tmp))
     if len(k1) >= 3:
        print(m, k1)
        break

t1, t2, t3 = [x[0] for x in factor(P(rebase(n, 19)))]
p, q, r = t1(m), t2(m), t3(m)
print(p * q * r == n)
print((len(t1.coefficients()), len(t2.coefficients()), len(t3.coefficients())))


for z in range(10, 20):
    tmp_pow = 19**3 + z - 2
    try:
        p1 = pow(tmp_pow, -1, p - 1)
        p2 = pow(tmp_pow, -1, q - 1)
        p3 = pow(tmp_pow, -1, r - 1)

        m1 = pow(c, p1, p)
        m2 = pow(c, p2, q)
        m3 = pow(c, p3, r)
        res = crt([m1, m2, m3], [p, q, r])
        # print(long_to_bytes(int(res)))
        print(res)
    except Exception as e:
        print(e)
        continue